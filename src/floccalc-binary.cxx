// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "floccalc-binary.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <dirent.h>
#include <limits.h>
#include <time.h>

int fexist( const char *a_option ) {
  char dir1[PATH_MAX]; 
  	char *dir2;
  	DIR *dip;
  	strncpy( dir1 , "",  PATH_MAX  );
  	strncpy( dir1 , a_option,  PATH_MAX  );
  
  	struct stat st_buf; 
  	int status; 
  	int fileordir = 0 ; 
  
  	status = stat ( dir1 , &st_buf);
  	if (status != 0) {
  		fileordir = 0;
  	}
  	FILE *fp2check = fopen( dir1  ,"r");
  	if( fp2check ) {
  		fileordir = 1; 
  		fclose(fp2check);
  	} 
  
  	if (S_ISDIR (st_buf.st_mode)) {
  		fileordir = 2; 
  	}
  	return fileordir;
  	/////////////////////////////
}
static int var_floccalc_element_sum = 0; 

int foccalc_runwith( const char *fooapp , const char *foofile  ) {
  char foostr[PATH_MAX];
    snprintf( foostr , sizeof( foostr ), "%s \"%s\" " ,  fooapp , foofile ); 
    printf( "CMD %s\n", foostr ); 
    system( foostr ) ;
}

int fcoccalc_periodic_select_elt( const char *fooelement ) {
  if ( var_floccalc_element_sum == 2 ) 
   {
       var_input_floc_elements->value( "" );
       var_input_floc_variable1->value( "" );
       var_floccalc_element_sum = 0; 
   }
   	
  	
   char foostr[PATH_MAX];
   if ( strlen( var_input_floc_elements->value() ) == 0 ) 
      snprintf( foostr , sizeof( foostr ), "%s" ,  fooelement ); 
   else 
      snprintf( foostr , sizeof( foostr ), "%s %s" ,  var_input_floc_elements->value() , fooelement ); 
  
  
   var_input_floc_elements->value( foostr );
   var_floccalc_element_sum++;
   
   
   if ( var_floccalc_element_sum == 2 ) 
   {
       var_input_floc_variable1->value( fooelement );
   }
   
   
   // eob
}

Fl_Double_Window *win1=(Fl_Double_Window *)0;

static void cb_Quit(Fl_Button*, void*) {
  exit( 0 );
}

static void cb_Li(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "li" );
}

static void cb_Na(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "na" );
}

static void cb_K(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Rb(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cs(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "cs" );
}

static void cb_Fr(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Be(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "be" );
}

static void cb_Mg(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "mg" );
}

static void cb_Ca(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Sr(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ba(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ra(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Sc(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "sc" );
}

static void cb_Y(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "y" );
}

static void cb_Lu(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "lu" );
}

static void cb_Lr(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "lr" );
}

static void cb_Ti(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ti" );
}

static void cb_Zr(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "zr" );
}

static void cb_Hf(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "hf" );
}

static void cb_Rf(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "rf" );
}

static void cb_V(Fl_Button*, void* v) {
  fcoccalc_periodic_select_elt( "v" );
}

static void cb_Nb(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "nb" );
}

static void cb_Ta(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ta" );
}

static void cb_Db(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cr(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "cr" );
}

static void cb_Mo(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "mo" );
}

static void cb_W(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "w" );
}

static void cb_Sg(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Mn(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "mn" );
}

static void cb_Tc(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "tc" );
}

static void cb_Re(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "re" );
}

static void cb_Bh(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Fe(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "fe" );
}

static void cb_Ru(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ru" );
}

static void cb_Os(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "os" );
}

static void cb_Hs(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Co(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "co" );
}

static void cb_Rh(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "rh" );
}

static void cb_Ir(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ir" );
}

static void cb_Mt(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ni(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ni" );
}

static void cb_Pd(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "pd" );
}

static void cb_Pt(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "pt" );
}

static void cb_Ds(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cu(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "cu" );
}

static void cb_Ag(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ag" );
}

static void cb_Au(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "au" );
}

static void cb_Rg(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Zn(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "zn" );
}

static void cb_Cd(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "cd" );
}

static void cb_Hg(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "hg" );
}

static void cb_Cn(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_B(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Al(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "al" );
}

static void cb_Ga(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ga" );
}

static void cb_In(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "in" );
}

static void cb_TI(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Uut(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_C(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "c" );
}

static void cb_Si(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "si" );
}

static void cb_Ge(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "ge" );
}

static void cb_Sn(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "sn" );
}

static void cb_Pb(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "pb" );
}

static void cb_Uuq(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_N(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_P(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_As(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "as" );
}

static void cb_Sb(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "sb" );
}

static void cb_Bi(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "bi" );
}

static void cb_Uup(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_O(Fl_Button* o, void*) {
  fcoccalc_periodic_select_elt( "o" );
}

static void cb_S(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Se(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "se" );
}

static void cb_Te(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "te" );
}

static void cb_Po(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "po" );
}

static void cb_Uuh(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_F(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cl(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "cl" );
}

static void cb_Br(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_I(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_At(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "at" );
}

static void cb_Uus(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ne(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ar(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Kr(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Xe(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Rn(Fl_Button*, void*) {
  fcoccalc_periodic_select_elt( "rn" );
}

static void cb_Uuo(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_La(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ac(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ce(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Th(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pr(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pa(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Nd(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_U(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Np(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Sm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Pu(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Eu(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Am(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Gd(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Tb(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Bk(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Dy(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Cf(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Ho(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Es(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Er(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Fm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Tm(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Md(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_Yb(Fl_Button*, void*) {
  system( " xterm   "  );
}

static void cb_No(Fl_Button*, void*) {
  system( " xterm   "  );
}

Fl_Input *var_input_floc_elements=(Fl_Input *)0;

Fl_Input *var_input_floc_variable1=(Fl_Input *)0;

Fl_Input *var_input_floc_variable2=(Fl_Input *)0;

Fl_Input *var_input_floc_database=(Fl_Input *)0;

static void cb_var_input_floc_database(Fl_Input*, void*) {
  // cost507R.TDB
// unary cannot calc bin
// var_input_floc_database->value( "unary50.tdb" );
}

static void cb_2(Fl_Button*, void*) {
  system( "  screen -d -m flnotepad macro.ocm " );
}

static void cb_1(Fl_Button*, void*) {
  // unary50.tdb

    statusbar->value( " > Performing a binary calculation" );

        FILE *source;
        int ch ;
        if ( fexist( "unary50.tdb" ) == 1 ) 
        {
                source = fopen( "unary50.tdb" , "r");
                while( ( ch = fgetc( source ) ) != EOF )
                {
                        // printf( "%c", ch );
                }
                fclose(source);
        }
        
        
        
        
        
        
        char foostr[PATH_MAX];  
        char fooelement1[PATH_MAX];
        char fooelement2[PATH_MAX];
        
        
        

      char str[PATH_MAX];
      char ptr[strlen(str)+1];
      int i,j=0;
      int foundelement = 0; 
      /// ELEMENT #1      
      /// str element 1
      strncpy( str, var_input_floc_elements->value(), PATH_MAX ); 
      for(i=0; str[i]!='\0'; i++)
      {
        if ( str[i] == ' ' )
        {
          //ptr[j++]='-';        
          foundelement = 1; 
        }
        else if (str[i] != '\n' && str[i] != '\n') 
        {
             if ( foundelement == 0 ) 
             { 
                ptr[j++]=str[i];
             }
             else 
             {
             }
        }
      } 
      ptr[j]='\0';
      printf( "Char opr. EL1 => %s\n" , ptr );  
      strncpy( fooelement1, ptr, PATH_MAX ); 


      /// ELEMENT #2
      /// str element 2 
      // strncpy( str, "", PATH_MAX ); 
      snprintf( ptr , sizeof( ptr ), "" ); 
      snprintf( str , sizeof( str ), "" ); 
      strncpy( str, var_input_floc_elements->value(), PATH_MAX ); 
      i = 0; j = 0; 
      foundelement = 0 ;
      for(i=0; str[i]!='\0'; i++)
      {
        if ( str[i] == ' ' )
        {
          //ptr[j++]='-';        
          foundelement++; 
        }
        else if (str[i] != '\n' && str[i] != '\n') 
        {
             if ( foundelement == 1 ) 
             { 
                ptr[j++]=str[i];
             }
             else 
             {
             }
        }
      } 
      ptr[j]='\0';
      printf( "Char opr. EL2 => %s\n" , ptr );  
      strncpy( fooelement2, ptr, PATH_MAX ); 

        
        
        FILE *fpout;
        fpout = fopen( "macro.ocm", "wb" );
        
        fputs( "\n" , fpout);
	fputs( "new Y\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "set echo\n" , fpout ); 
	fputs( "\n" , fpout ); 
	

	//fputs( "r t ./unary50.tdb\n" , fpout );       
        snprintf( foostr , sizeof( foostr ), "r t ./%s\n" ,  var_input_floc_database->value() ); 
        printf( "Item %s\n", foostr ); 
        fputs( foostr , fpout ); 

        snprintf( foostr , sizeof( foostr ), "%s\n" ,  var_input_floc_elements->value() ); 
        printf( "Item %s\n", foostr ); 
        fputs( foostr   , fpout );  
	//fputs( "au pd\n" , fpout ); 

	fputs( "\n" , fpout ); 
	fputs( "\n" , fpout ); 
	
	
	// fputs( "set cond t=1000 p=1e5 n=1 x(pd)=.2\n" , fpout ); 
	// fooelement2
        snprintf( foostr , sizeof( foostr ), "set cond t=1000 p=1e5 n=1 x(%s)=.2\n" , fooelement2  ); 
        printf( "Item %s\n", foostr ); 
        fputs( foostr   , fpout );
         
	
	fputs( "\n" , fpout ); 
	fputs( "c e\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "l r 1\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( " \n" , fpout ); 
	fputs( "\n" , fpout ); 
	
	
	//fputs( "set ax 1 x(pd) 0 1 0.025\n" , fpout ); 
	// fooelement2
        snprintf( foostr , sizeof( foostr ), "set ax 1 x(%s) 0 1 0.025\n" , fooelement2  ); 
        printf( "Item %s\n", foostr ); 
        fputs( foostr   , fpout ); 
	
	fputs( "set ax 2 t 500 2500 10\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "l ax\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "l sh\n" , fpout ); 
	fputs( "\n" , fpout ); 

        if ( var_fcoccalc_bin_calc_add_ref_phase->value() == 1 ) 
        {	
	  //fputs( "set ref au fcc,,,,,\n" , fpout ); 
	  // fooelement2
          snprintf( foostr , sizeof( foostr ), "set ref %s fcc,,,,,\n" , fooelement1  ); 
          printf( "Item %s\n", foostr ); 
          fputs( foostr   , fpout );
	
  	  //fputs( "set ref pd fcc,,,,,\n" , fpout ); 
  	  // fooelement2
          snprintf( foostr , sizeof( foostr ), "set ref %s fcc,,,,,\n" , fooelement2  ); 
          printf( "Item %s\n", foostr ); 
          fputs( foostr   , fpout );
        }
	
	fputs( "\n" , fpout ); 
	fputs( " \n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "map\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( " \n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "\n" , fpout ); 
	fputs( "plot\n" , fpout ); 
	
	//fputs( "x(*,pd)\n" , fpout ); 
	// fooelement2
        snprintf( foostr , sizeof( foostr ), "x(*,%s)\n" , fooelement2  ); 
        printf( "Item %s\n", foostr ); 
        fputs( foostr   , fpout ); 
	
	fputs( "T\n" , fpout ); 
	fputs( "title map 1 fig 1, temp Kelvin\n" , fpout ); 
	fputs( "render\n" , fpout ); 
	fputs( "\n" , fpout ); 
        
        fclose( fpout );
	/// eob;
}

static void cb_4(Fl_Button*, void*) {
  system(  "  screen -d  -m  gnuplot ocgnu.plt  " );
}

static void cb_3(Fl_Button*, void*) {
  system(  "  rm ocgnu.plt  ;   screen -d  -m   xterm -e   oc   macro.ocm " );
}

static void cb_CA(Fl_Button*, void*) {
  var_input_floc_elements->value( "" );
}

static void cb_CA1(Fl_Button*, void*) {
  var_input_floc_variable1->value( "" );
}

static void cb_CA2(Fl_Button*, void*) {
  var_input_floc_variable2->value( "" );
}

static void cb_CA3(Fl_Button*, void*) {
  var_input_floc_database->value( "" );
//unary50.tdb
//var_input_floc_database->value( "unary50.tdb" );
}

static void cb_(Fl_Button*, void*) {
  // foccalc_runwith(  "  screen -d -m flviewplus " ,  var_input_floc_database->value(  ) );


foccalc_runwith(  "  screen -d -m flview " ,  var_input_floc_database->value(  ) );
}

static void cb_D(Fl_Button*, void*) {
  char str[PATH_MAX];
      strncpy( str, var_input_floc_elements->value(), PATH_MAX ); 
 
      char ptr[strlen(str)+1];
      int i,j=0;
      for(i=0; str[i]!='\0'; i++)
      {
        if ( str[i] == ' ' )
        {
          ptr[j++]='-';        
        }
        else if (str[i] != '\n' && str[i] != '\n') 
          ptr[j++]=str[i];
      } 
      ptr[j]='\0';

 

  char foostr[PATH_MAX];
  
  if ( var_fcoccalc_web_browser_def_dillo->value() == 1 ) 
  {
     snprintf( foostr , sizeof( foostr ), "%s%s.jpg' " ,  "    screen -d -m  /usr/bin/dillo  'https://www.crct.polymtl.ca/fact/documentation/SGTE2017/" , ptr );  // ptr
  }
  
  // ssl https... 
  else if ( fexist( "/usr/bin/chromium" ) == 1 ) 
      snprintf( foostr , sizeof( foostr ), "%s%s.jpg' " ,  "    screen -d -m  /usr/bin/chromium  'https://www.crct.polymtl.ca/fact/documentation/SGTE2017/" , ptr );  // ptr

  else if ( fexist( "/usr/bin/chromium-browser" ) == 1 ) 
      snprintf( foostr , sizeof( foostr ), "%s%s.jpg' " ,  "    screen -d -m  /usr/bin/chromium-browser  'https://www.crct.polymtl.ca/fact/documentation/SGTE2017/" , ptr );  // ptr

  
  else if ( fexist( "/usr/bin/firefox" ) == 1 ) 
      snprintf( foostr , sizeof( foostr ), "%s%s.jpg' " ,  "    screen -d -m  /usr/bin/firefox  'https://www.crct.polymtl.ca/fact/documentation/SGTE2017/" , ptr );  // ptr


  else 
      snprintf( foostr , sizeof( foostr ), "%s%s.jpg' " ,  "    screen -d -m  dillo  'https://www.crct.polymtl.ca/fact/documentation/SGTE2017/" , ptr );  // ptr
  
  printf( "CMD %s\n", foostr ); 
  system( foostr ) ;
  
  
  
   
   
// https://www.crct.polymtl.ca/fact/documentation/SGTE2017/Al-Si.jpg
// var_input_floc_elements->value( "" );
}

Fl_File_Browser *win_macro_flbrowser1=(Fl_File_Browser *)0;

static void cb_win_macro_flbrowser1(Fl_File_Browser*, void*) {
  if ( win_macro_flbrowser1->value() >= 1 ) 
 win_macro_flbrowser1_output1->value(  win_macro_flbrowser1->text( win_macro_flbrowser1->value() ) );
}

Fl_Output *win_macro_flbrowser1_output1=(Fl_Output *)0;

static void cb_Browse(Fl_Button*, void*) {
  win_macro_flbrowser1->clear();
  //     win_macro_flbrowser1->filter( 0 ); 
  
  
  // win_macro_flbrowser1_filter->value( "*.tdb" );
  
  win_macro_flbrowser1->filter(  win_macro_flbrowser1_filter->value( )  ); 
  
     win_macro_flbrowser1->load( "." );
     
     
     //eow;
}

static void cb_Select(Fl_Button*, void*) {
  char foofile[PATH_MAX];
if ( win_macro_flbrowser1->value() >= 1 ) 
{
   var_input_floc_database->value(  win_macro_flbrowser1->text( win_macro_flbrowser1->value() ) );
};
}

static void cb_Preview(Fl_Button*, void*) {
  system( "   screen -d -m flpreview  " );
}

static void cb_View(Fl_Button*, void*) {
  if ( win_macro_flbrowser1->value() >= 1 ) 
{
   // var_input_floc_database->value(  win_macro_flbrowser1->text( win_macro_flbrowser1->value() ) );
   foccalc_runwith(  " screen -d -m flviewplus " ,   win_macro_flbrowser1->text( win_macro_flbrowser1->value() )  ); 
};
}

Fl_Input *win_macro_flbrowser1_filter=(Fl_Input *)0;

static void cb_Open(Fl_Button*, void*) {
  char str[PATH_MAX];
      strncpy( str, var_input_floc_elements->value(), PATH_MAX ); 
      char ptr[strlen(str)+1];
      int i,j=0;
      for(i=0; str[i]!='\0'; i++)
      {
        if ( str[i] == ' ' )
        {
          ptr[j++]='-';        
        }
        else if (str[i] != '\n' && str[i] != '\n') 
          ptr[j++]=str[i];
      } 
      ptr[j]='\0';

 

  char foostr[PATH_MAX];
  snprintf( foostr , sizeof( foostr ), "%s%s.jpg' " ,  "  screen -d -m   dillo  'https://www.crct.polymtl.ca/fact/documentation/SGTE2017/" , ptr );  // ptr
  printf( "CMD %s\n", foostr ); 
  system( foostr ) ;
   
   
// https://www.crct.polymtl.ca/fact/documentation/SGTE2017/Al-Si.jpg
// var_input_floc_elements->value( "" );
}

Fl_Check_Button *var_fcoccalc_web_browser_def_dillo=(Fl_Check_Button *)0;

Fl_Check_Button *var_fcoccalc_bin_calc_add_ref_phase=(Fl_Check_Button *)0;

static void cb_Website(Fl_Button*, void*) {
  char foostr[PATH_MAX];
  snprintf( foostr , sizeof( foostr ),    " cd ; screen -d -m   dillo  ' https://github.com/lusamek/floccalc'   " );    
  printf( "CMD %s\n", foostr ); 
  system( foostr ) ;
}

static void cb_Periodic(Fl_Button*, void*) {
  // This program shows the periodic table of elements and information about these elements  
   
   
   if ( fexist( "/usr/bin/kalzium" ) == 1 )
   
     system( " screen -d -m /usr/bin/kalzium  " );   

   
   else if ( fexist( "/usr/bin/gperiodic" ) == 1 )
   
     system( " screen -d -m /usr/bin/gperiodic  " );   
     
   else 
    
     system( " screen -d -m flperiodic  " );
}

static void cb_Current(Fl_Button*, void*) {
  char ptr[PATH_MAX];
    char cwd[PATH_MAX];
    
    snprintf( ptr , sizeof( ptr ), getcwd( cwd, PATH_MAX ) ); 
    statusbar->value( ptr );
}

Fl_Output *statusbar=(Fl_Output *)0;

Fl_Double_Window* make_window() {
  { win1 = new Fl_Double_Window(695, 700, "FLOCCALC-BINARY");
    win1->box(FL_THIN_UP_BOX);
    { Fl_Box* o = new Fl_Box(5, 5, 685, 25, "Binary Calculation");
      o->box(FL_THIN_UP_BOX);
      o->labelfont(1);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(5, 670, 685, 25, "&Quit");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Quit);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(20, 320, 650, 335);
      o->box(FL_DOWN_BOX);
      { Fl_Button* o = new Fl_Button(30, 330, 30, 25, "H");
        o->color((Fl_Color)180);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(30, 360, 30, 25, "Li");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Li);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(30, 390, 30, 25, "Na");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Na);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(30, 420, 30, 25, "K");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_K);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(30, 450, 30, 25, "Rb");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Rb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(30, 480, 30, 25, "Cs");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Cs);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(30, 510, 30, 25, "Fr");
        o->color((Fl_Color)180);
        o->callback((Fl_Callback*)cb_Fr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(65, 360, 30, 25, "Be");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Be);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(65, 390, 30, 25, "Mg");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Mg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(65, 420, 30, 25, "Ca");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Ca);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(65, 450, 30, 25, "Sr");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Sr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(65, 480, 30, 25, "Ba");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Ba);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(65, 510, 30, 25, "Ra");
        o->color((Fl_Color)90);
        o->callback((Fl_Callback*)cb_Ra);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 420, 30, 25, "Sc");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Sc);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 450, 30, 25, "Y");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Y);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 480, 30, 25, "Lu");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Lu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 510, 30, 25, "Lr");
        o->callback((Fl_Callback*)cb_Lr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 420, 30, 25, "Ti");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ti);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 450, 30, 25, "Zr");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Zr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 480, 30, 25, "Hf");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Hf);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 510, 30, 25, "Rf");
        o->callback((Fl_Callback*)cb_Rf);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(170, 420, 30, 25, "V");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_V);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(170, 450, 30, 25, "Nb");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Nb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(170, 480, 30, 25, "Ta");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ta);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(170, 510, 30, 25, "Db");
        o->callback((Fl_Callback*)cb_Db);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 420, 30, 25, "Cr");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Cr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 450, 30, 25, "Mo");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Mo);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 480, 30, 25, "W");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_W);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 510, 30, 25, "Sg");
        o->callback((Fl_Callback*)cb_Sg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 420, 30, 25, "Mn");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Mn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 450, 30, 25, "Tc");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Tc);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 480, 30, 25, "Re");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Re);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 510, 30, 25, "Bh");
        o->callback((Fl_Callback*)cb_Bh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 420, 30, 25, "Fe");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Fe);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 450, 30, 25, "Ru");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ru);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 480, 30, 25, "Os");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Os);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 510, 30, 25, "Hs");
        o->callback((Fl_Callback*)cb_Hs);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 420, 30, 25, "Co");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Co);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 450, 30, 25, "Rh");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Rh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 480, 30, 25, "Ir");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ir);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 510, 30, 25, "Mt");
        o->callback((Fl_Callback*)cb_Mt);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(345, 420, 30, 25, "Ni");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ni);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(345, 450, 30, 25, "Pd");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Pd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(345, 480, 30, 25, "Pt");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Pt);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(345, 510, 30, 25, "Ds");
        o->callback((Fl_Callback*)cb_Ds);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 420, 30, 25, "Cu");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Cu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 450, 30, 25, "Ag");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Ag);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 480, 30, 25, "Au");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Au);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 510, 30, 25, "Rg");
        o->callback((Fl_Callback*)cb_Rg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(415, 420, 30, 25, "Zn");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Zn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(415, 450, 30, 25, "Cd");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Cd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(415, 480, 30, 25, "Hg");
        o->color((Fl_Color)174);
        o->callback((Fl_Callback*)cb_Hg);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(415, 510, 30, 25, "Cn");
        o->callback((Fl_Callback*)cb_Cn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 360, 30, 25, "B");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_B);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 390, 30, 25, "Al");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Al);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 420, 30, 25, "Ga");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Ga);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 450, 30, 25, "In");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_In);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 480, 30, 25, "TI");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_TI);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 510, 30, 25, "Uut");
        o->callback((Fl_Callback*)cb_Uut);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 360, 30, 25, "C");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_C);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 390, 30, 25, "Si");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Si);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 420, 30, 25, "Ge");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Ge);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 450, 30, 25, "Sn");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Sn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 480, 30, 25, "Pb");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Pb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 510, 30, 25, "Uuq");
        o->callback((Fl_Callback*)cb_Uuq);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 360, 30, 25, "N");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_N);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 390, 30, 25, "P");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_P);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 420, 30, 25, "As");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_As);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 450, 30, 25, "Sb");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Sb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 480, 30, 25, "Bi");
        o->color((Fl_Color)237);
        o->callback((Fl_Callback*)cb_Bi);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 510, 30, 25, "Uup");
        o->callback((Fl_Callback*)cb_Uup);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 360, 30, 25, "O");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_O);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 390, 30, 25, "S");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_S);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 420, 30, 25, "Se");
        o->color((Fl_Color)70);
        o->callback((Fl_Callback*)cb_Se);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 450, 30, 25, "Te");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Te);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 480, 30, 25, "Po");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Po);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 510, 30, 25, "Uuh");
        o->callback((Fl_Callback*)cb_Uuh);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(590, 360, 30, 25, "F");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_F);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(590, 390, 30, 25, "Cl");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Cl);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(590, 420, 30, 25, "Br");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_Br);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(590, 450, 30, 25, "I");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_I);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(590, 480, 30, 25, "At");
        o->color((Fl_Color)252);
        o->callback((Fl_Callback*)cb_At);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(590, 510, 30, 25, "Uus");
        o->callback((Fl_Callback*)cb_Uus);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(625, 360, 30, 25, "Ne");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Ne);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(625, 390, 30, 25, "Ar");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Ar);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(625, 420, 30, 25, "Kr");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Kr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(625, 450, 30, 25, "Xe");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Xe);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(625, 480, 30, 25, "Rn");
        o->color((Fl_Color)9);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Rn);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(625, 510, 30, 25, "Uuo");
        o->callback((Fl_Callback*)cb_Uuo);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(625, 330, 30, 25, "He");
        o->color((Fl_Color)9);
        o->labelfont(1);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 575, 30, 25, "La");
        o->callback((Fl_Callback*)cb_La);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(100, 605, 30, 25, "Ac");
        o->callback((Fl_Callback*)cb_Ac);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 575, 30, 25, "Ce");
        o->callback((Fl_Callback*)cb_Ce);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(135, 605, 30, 25, "Th");
        o->callback((Fl_Callback*)cb_Th);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(170, 575, 30, 25, "Pr");
        o->callback((Fl_Callback*)cb_Pr);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(170, 605, 30, 25, "Pa");
        o->callback((Fl_Callback*)cb_Pa);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 575, 30, 25, "Nd");
        o->callback((Fl_Callback*)cb_Nd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(205, 605, 30, 25, "U");
        o->callback((Fl_Callback*)cb_U);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 575, 30, 25, "Pm");
        o->callback((Fl_Callback*)cb_Pm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(240, 605, 30, 25, "Np");
        o->callback((Fl_Callback*)cb_Np);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 575, 30, 25, "Sm");
        o->callback((Fl_Callback*)cb_Sm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(275, 605, 30, 25, "Pu");
        o->callback((Fl_Callback*)cb_Pu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 575, 30, 25, "Eu");
        o->callback((Fl_Callback*)cb_Eu);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(310, 605, 30, 25, "Am");
        o->callback((Fl_Callback*)cb_Am);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(345, 575, 30, 25, "Gd");
        o->callback((Fl_Callback*)cb_Gd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(345, 605, 30, 25, "Cm");
        o->callback((Fl_Callback*)cb_Cm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 575, 30, 25, "Tb");
        o->callback((Fl_Callback*)cb_Tb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(380, 605, 30, 25, "Bk");
        o->callback((Fl_Callback*)cb_Bk);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(415, 575, 30, 25, "Dy");
        o->callback((Fl_Callback*)cb_Dy);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(415, 605, 30, 25, "Cf");
        o->callback((Fl_Callback*)cb_Cf);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 575, 30, 25, "Ho");
        o->callback((Fl_Callback*)cb_Ho);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(450, 605, 30, 25, "Es");
        o->callback((Fl_Callback*)cb_Es);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 575, 30, 25, "Er");
        o->callback((Fl_Callback*)cb_Er);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(485, 605, 30, 25, "Fm");
        o->callback((Fl_Callback*)cb_Fm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 575, 30, 25, "Tm");
        o->callback((Fl_Callback*)cb_Tm);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(520, 605, 30, 25, "Md");
        o->callback((Fl_Callback*)cb_Md);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 575, 30, 25, "Yb");
        o->callback((Fl_Callback*)cb_Yb);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(555, 605, 30, 25, "No");
        o->callback((Fl_Callback*)cb_No);
      } // Fl_Button* o
      o->end();
      Fl_Group::current()->resizable(o);
    } // Fl_Group* o
    { Fl_Tabs* o = new Fl_Tabs(10, 60, 675, 245, "Menu");
      { Fl_Group* o = new Fl_Group(20, 85, 660, 220, "&Binary");
        { Fl_Group* o = new Fl_Group(20, 115, 650, 175, "Parameters");
          o->box(FL_DOWN_BOX);
          { var_input_floc_elements = new Fl_Input(110, 135, 240, 25, "Elements");
          } // Fl_Input* var_input_floc_elements
          { var_input_floc_variable1 = new Fl_Input(110, 170, 240, 25, "Variable1");
          } // Fl_Input* var_input_floc_variable1
          { var_input_floc_variable2 = new Fl_Input(110, 205, 240, 25, "Variable2");
            var_input_floc_variable2->value( "t" );
          } // Fl_Input* var_input_floc_variable2
          { var_input_floc_database = new Fl_Input(110, 240, 240, 25, "Database");
            var_input_floc_database->callback((Fl_Callback*)cb_var_input_floc_database);
            var_input_floc_database->value( "cost507R.TDB" );
          } // Fl_Input* var_input_floc_database
          { Fl_Button* o = new Fl_Button(490, 165, 160, 35, "&2. Edit");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_2);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(490, 130, 160, 35, "&1. Create");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(490, 235, 160, 35, "&4. Plot");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_4);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(490, 200, 160, 35, "&3. Compute");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_3);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 135, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 170, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 205, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA2);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(350, 240, 30, 25, "CA");
            o->callback((Fl_Callback*)cb_CA3);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(385, 240, 35, 25, "&>>");
            o->callback((Fl_Callback*)cb_);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(385, 135, 35, 25, "D&B");
            o->callback((Fl_Callback*)cb_D);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(25, 85, 660, 220, "&Database");
        o->hide();
        { Fl_Group* o = new Fl_Group(25, 100, 650, 200);
          o->box(FL_DOWN_BOX);
          { win_macro_flbrowser1 = new Fl_File_Browser(35, 110, 525, 155);
            win_macro_flbrowser1->callback((Fl_Callback*)cb_win_macro_flbrowser1);
            Fl_Group::current()->resizable(win_macro_flbrowser1);
            win_macro_flbrowser1->type( FL_HOLD_BROWSER  );
          } // Fl_File_Browser* win_macro_flbrowser1
          { win_macro_flbrowser1_output1 = new Fl_Output(35, 270, 525, 20);
            win_macro_flbrowser1_output1->color(FL_BACKGROUND_COLOR);
            win_macro_flbrowser1_output1->labelsize(12);
            win_macro_flbrowser1_output1->textsize(12);
          } // Fl_Output* win_macro_flbrowser1_output1
          { Fl_Button* o = new Fl_Button(570, 110, 95, 25, "&Browse");
            o->callback((Fl_Callback*)cb_Browse);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(570, 145, 95, 25, "&Select");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Select);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(570, 215, 95, 25, "&Preview");
            o->callback((Fl_Callback*)cb_Preview);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(570, 180, 95, 25, "&View");
            o->callback((Fl_Callback*)cb_View);
          } // Fl_Button* o
          { win_macro_flbrowser1_filter = new Fl_Input(605, 265, 55, 25, "Filter");
            win_macro_flbrowser1_filter->labelsize(12);
            win_macro_flbrowser1_filter->textsize(12);
            win_macro_flbrowser1_filter->value( "*.tdb" );
          } // Fl_Input* win_macro_flbrowser1_filter
          o->end();
          Fl_Group::current()->resizable(o);
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(25, 85, 655, 215, "SGTE");
        o->hide();
        { Fl_Group* o = new Fl_Group(25, 125, 645, 160, "Parameters");
          o->box(FL_DOWN_BOX);
          { Fl_Button* o = new Fl_Button(40, 140, 370, 45, "Open with Fact 2017, SGTE");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Open);
          } // Fl_Button* o
          { var_fcoccalc_web_browser_def_dillo = new Fl_Check_Button(40, 195, 275, 35, "Open SGTE diagram with dillo");
            var_fcoccalc_web_browser_def_dillo->down_box(FL_DOWN_BOX);
            var_fcoccalc_web_browser_def_dillo->value( 0 );
          } // Fl_Check_Button* var_fcoccalc_web_browser_def_dillo
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(30, 85, 650, 210, "Settings");
        o->hide();
        { var_fcoccalc_bin_calc_add_ref_phase = new Fl_Check_Button(35, 110, 355, 35, "Add phase (e.g. fcc) reference for calculations.");
          var_fcoccalc_bin_calc_add_ref_phase->down_box(FL_DOWN_BOX);
        } // Fl_Check_Button* var_fcoccalc_bin_calc_add_ref_phase
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(25, 85, 660, 220, "Help");
        o->hide();
        { Fl_Group* o = new Fl_Group(30, 120, 645, 160);
          o->box(FL_DOWN_BOX);
          { Fl_Button* o = new Fl_Button(45, 135, 230, 30, "Website OC Calc Utility");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Website);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(285, 135, 375, 30, "Periodic table of elements and information");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Periodic);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(45, 190, 140, 25, "Current path");
            o->labelfont(1);
            o->callback((Fl_Callback*)cb_Current);
          } // Fl_Button* o
          { statusbar = new Fl_Output(190, 190, 470, 25);
            statusbar->color(FL_BACKGROUND_COLOR);
          } // Fl_Output* statusbar
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    win1->end();
  } // Fl_Double_Window* win1
  win1->show();
  return win1;
}

int main( int argc, char *argv[] ) {
  char mydirnow[2500];  
    //strncpy( inipath , getcwd( mydirnow, 2500 ), 2500 );
    
    // working dir 
    if ( argc == 2)
    if ( strcmp( argv[1] , "" ) !=  0 )
    {
            chdir( argv[ 1 ] );
    }
    //printf( "Current Directory: %s \n", getcwd( mydirnow, 2500 ) );
    //strncpy( userpath , getcwd( mydirnow, 2500 ), 2500 );
  
  
  
  
   make_window();
   Fl::run();
   
   return 0;
}
